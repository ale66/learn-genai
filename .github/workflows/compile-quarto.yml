name: Compile Quarto Documents

on:
  push:
    branches: [ main, master ]
    paths: [ '**/*.qmd' ]
  pull_request:
    branches: [ main, master ]
    paths: [ '**/*.qmd' ]

jobs:
  compile-quarto:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for accurate diff detection
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      with:
        version: release

    - name: Install TinyTeX for PDF rendering
      run: |
        quarto install tinytex

    - name: Get changed .qmd files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          # For push events, compare with previous commit
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '\.qmd$' || true)
          else
            # First commit, compile all files
            CHANGED_FILES=$(find . -name "*.qmd" -type f)
          fi
        else
          # For pull requests, compare with base branch
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep '\.qmd$' || true)
        fi
        
        echo "Changed .qmd files:"
        echo "$CHANGED_FILES"
        
        # Convert to JSON array for matrix strategy
        if [ -n "$CHANGED_FILES" ]; then
          # Format files for JSON array
          FILES_JSON=$(echo "$CHANGED_FILES" | jq -R -s -c 'split("\n")[:-1]')
          echo "files=$FILES_JSON" >> $GITHUB_OUTPUT
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "files=[]" >> $GITHUB_OUTPUT
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Compile changed Quarto documents
      if: steps.changed-files.outputs.has_changes == 'true'
      run: |
        FILES='${{ steps.changed-files.outputs.files }}'
        echo "Compiling files: $FILES"
        
        # Parse JSON array and compile each file
        echo "$FILES" | jq -r '.[]' | while read -r file; do
          if [ -n "$file" ] && [ -f "$file" ]; then
            echo "Compiling: $file"
            
            # Get directory and filename without extension
            dir=$(dirname "$file")
            filename=$(basename "$file" .qmd)
            
            # Compile to PDF in the same directory
            quarto render "$file" --to pdf --output-dir "$dir"
            
            echo "âœ… Compiled $file to $dir/$filename.pdf"
          fi
        done

    - name: Commit generated PDFs
      if: steps.changed-files.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add any new PDF files
        git add **/*.pdf
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No PDF changes to commit"
        else
          git commit -m "Auto-compile: Generate PDFs from changed Quarto documents

          Generated by GitHub Actions workflow.
          
          Changed files:
          ${{ steps.changed-files.outputs.files }}"
          
          git push
        fi